#!/bin/bash
set -e
LANG=C
# @sacloud-once
# @sacloud-desc サーバ作成後、サーバのIPアドレスをhostsに登録してブラウザでアクセスしてください。
# @sacloud-desc (このスクリプトは、CentOS6.XもしくはScientific Linux6.Xでのみ動作します)
# @sacloud-desc Movable TypeダウンロードURL 入力例: https://xxxxxxxxxxxxxxxxxx/
# @sacloud-text required shellarg maxlen=200 durl "Movable TypeダウンロードURL"
# @sacloud-password required shellarg maxlen=100 rootpw "MySQLのパスワード"
DURL=@@@durl@@@
ROOTPW=@@@rootpw@@@

## eth0をhosts登録
cp -p /etc/hosts{,.orig}
echo $(ip a show dev eth0 | egrep '(inet )' | awk '{print $2}' | sed -e 's/\/[0-9]*//g') ${HOSTNAME} | awk '{print $1"\t""\t"$2}' | tee -a /etc/hosts

## ドキュメントルート作成とMovable Typeダウンロード
HOME=/root
export HOME
mkdir -p /var/www
mkdir -p ${HOME}/src
cd ${HOME}/src
FILENAME=$(basename ${DURL} | awk 'BEGIN {FS="?"} {print $1}')
curl -o ${FILENAME} ${DURL}
unzip ${FILENAME}
mv $(ls | grep -v zip$) /var/www/html
cd ${HOME}

## iptables設定
service iptables stop
iptables -P INPUT DROP
iptables -P OUTPUT ACCEPT
iptables -P FORWARD DROP
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
service iptables save
service iptables start
chkconfig iptables on

## MySQLインストール
yum -y install http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm
yum -y install mysql-community-server
service mysqld start
chkconfig mysqld on
mysql -u root -e "SET PASSWORD FOR root@localhost=PASSWORD('${ROOTPW}');"
mysql -u root -p${ROOTPW} -e "SET PASSWORD FOR root@\"${HOSTNAME}\"=PASSWORD('${ROOTPW}');"
mysql -u root -p${ROOTPW} -e "SET PASSWORD FOR root@127.0.0.1=PASSWORD('${ROOTPW}');"
mysql -u root -p${ROOTPW} -e "SET PASSWORD FOR root@\"::1\"=PASSWORD('${ROOTPW}');"
mysql -u root -p${ROOTPW} -e "delete from mysql.user where password='';"
mysql -u root -p${ROOTPW} -e 'FLUSH PRIVILEGES;'

## database「mt」作成
mysql -u root -p${ROOTPW} -e "create database mt;"


## nginx+FCGIインストール
yum -y install http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm
cp -p /etc/yum.repos.d/nginx.repo /etc/yum.repos.d/nginx.repo.orig
sed -i 's/centos/mainline\/centos/' /etc/yum.repos.d/nginx.repo
yum -y install perl-DBI perl-DBD-MySQL perl-Archive-Zip perl-XML-SAX perl-XML-LibXML perl-XML-NamespaceSupport perl-Digest-SHA perl-GD gd libXpm perl-Crypt-SSLeay perl-Archive-Tar perl-IO-Zlib perl-Package-Constants ImageMagick-perl perl-Time-HiRes
yum -y --enablerepo=epel install perl-FCGI perl-Crypt-DSA
yum -y --enablerepo=rpmforge install perl-XML-SAX-Expat perl-Imager
yum -y install nginx
mkdir -p /etc/nginx/conf.d/BACKUP
mv /etc/nginx/conf.d/*.conf /etc/nginx/conf.d/BACKUP/
cat << _EOL_ | tee /etc/nginx/conf.d/000_MT.conf
server {
    listen       80;
    server_name  ${HOSTNAME};
    location / {
        root   /var/www/html;
        index  index.html index.htm index.cgi index.pl;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
    location ~ .pl$ {
        gzip off;
        root   /var/www/html;
        include /etc/nginx/fastcgi_params;
        fastcgi_pass 127.0.0.1:8999;
        fastcgi_index index.pl;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    }
    location ~ .cgi$ {
        gzip off;
        root   /var/www/html;
        include /etc/nginx/fastcgi_params;
        fastcgi_pass 127.0.0.1:8999;
        fastcgi_index index.cgi;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    }
}
_EOL_

## fastcgi-wrapper.pl 作成
cat << _EOL_ | tee /usr/bin/fastcgi-wrapper.pl
#!/usr/bin/perl

use FCGI;
use Socket;
use POSIX qw(setsid);

require 'syscall.ph';

&daemonize;

#this keeps the program alive or something after exec'ing perl scripts
END() { } BEGIN() { }
*CORE::GLOBAL::exit = sub { die "fakeexit\nrc=".shift()."\n"; }; 
eval q{exit}; 
if (\$@) { 
    exit unless \$@ =~ /^fakeexit/; 
};

&main;

sub daemonize() {
    chdir '/'                 or die "Can't chdir to /: \$!";
    defined(my \$pid = fork)   or die "Can't fork: \$!";
    exit if \$pid;
    setsid                    or die "Can't start a new session: \$!";
    umask 0;
}

sub main {
        \$socket = FCGI::OpenSocket( "127.0.0.1:8999", 10 ); #use IP sockets
        \$request = FCGI::Request( \*STDIN, \*STDOUT, \*STDERR, \%req_params, \$socket );
        if (\$request) { request_loop()};
            FCGI::CloseSocket( \$socket );
}

sub request_loop {
        while( \$request->Accept() >= 0 ) {

           #processing any STDIN input from WebServer (for CGI-POST actions)
           \$stdin_passthrough ='';
           \$req_len = 0 + \$req_params{'CONTENT_LENGTH'};
           if ((\$req_params{'REQUEST_METHOD'} eq 'POST') && (\$req_len != 0) ){ 
                my \$bytes_read = 0;
                while (\$bytes_read < \$req_len) {
                        my \$data = '';
                        my \$bytes = read(STDIN, \$data, (\$req_len - \$bytes_read));
                        last if (\$bytes == 0 || !defined(\$bytes));
                        \$stdin_passthrough .= \$data;
                        \$bytes_read += \$bytes;
                }
            }

            #running the cgi app
            if ( (-x \$req_params{SCRIPT_FILENAME}) &&  #can I execute this?
                 (-s \$req_params{SCRIPT_FILENAME}) &&  #Is this file empty?
                 (-r \$req_params{SCRIPT_FILENAME})     #can I read this file?
            ){
        pipe(CHILD_RD, PARENT_WR);
        my \$pid = open(KID_TO_READ, "-|");
        unless(defined(\$pid)) {
            print("Content-type: text/plain\r\n\r\n");
                        print "Error: CGI app returned no output - ";
                        print "Executing \$req_params{SCRIPT_FILENAME} failed !\n";
            next;
        }
        if (\$pid > 0) {
            close(CHILD_RD);
            print PARENT_WR \$stdin_passthrough;
            close(PARENT_WR);

            while(my \$s = <KID_TO_READ>) { print \$s; }
            close KID_TO_READ;
            waitpid(\$pid, 0);
        } else {
                    foreach \$key ( keys %req_params){
                       \$ENV{\$key} = \$req_params{\$key};
                    }
                    # cd to the script's local directory
                    if (\$req_params{SCRIPT_FILENAME} =~ /^(.*)\/[^\/]+\$/) {
                            chdir \$1;
                    }

            close(PARENT_WR);
            close(STDIN);
            #fcntl(CHILD_RD, F_DUPFD, 0);
            syscall(&SYS_dup2, fileno(CHILD_RD), 0);
            #open(STDIN, "<&CHILD_RD");
            exec(\$req_params{SCRIPT_FILENAME});
            die("exec failed");
        }
            } 
            else {
                print("Content-type: text/plain\r\n\r\n");
                print "Error: No such CGI app - \$req_params{SCRIPT_FILENAME} may not ";
                print "exist or is not executable by this process.\n";
            }

        }
}
_EOL_
chmod 700 /usr/bin/fastcgi-wrapper.pl

cat << _EOL_ | tee /etc/rc.d/init.d/perl-fastcgi
#!/bin/bash
#
# perl-fastcgi – this script starts and stops the perl-fastcgi daemon
#
# chkconfig: - 85 15
# description: 
# config:
# pidfile: 

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "\$NETWORKING" = "no" ] && exit 0

perlfastcgi="/usr/bin/fastcgi-wrapper.pl"
prog=\$(basename perl)

lockfile=/var/lock/subsys/perl-fastcgi

start() {
    [ -x \$perlfastcgi ] || exit 5
    echo -n \$"Starting \$prog: "
    daemon \$perlfastcgi
    retval=\$?
    echo
    [ \$retval -eq 0 ] && touch \$lockfile
    return \$retval
}

stop() {
    echo -n \$"Stopping \$prog: "
    killproc \$prog -QUIT
    retval=\$?
    echo
    [ \$retval -eq 0 ] && rm -f \$lockfile
    return \$retval
}

restart() {
    stop
    start
}

reload() {
    echo -n \$”Reloading \$prog: ”
    killproc \$nginx -HUP
    RETVAL=\$?
    echo
}

force_reload() {
    restart
}
rh_status() {
    status \$prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

case "\$1" in
    start)
        rh_status_q && exit 0
        \$1
        ;;
    stop)
        rh_status_q || exit 0
        \$1
        ;;
    restart)
        \$1
        ;;
    reload)
        rh_status_q || exit 7
        \$1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        ;;
    *)
        echo \$"Usage: \$0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
    esac
_EOL_
chmod 700 /etc/rc.d/init.d/perl-fastcgi
chkconfig --add perl-fastcgi
chkconfig perl-fastcgi on
service perl-fastcgi start
service nginx start
chkconfig nginx on
yum -y update
reboot
